package com.etrack.myapplication.fragmentimport android.content.ContentValuesimport android.content.Contextimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.etrack.myapplication.Rimport com.etrack.myapplication.`interface`.ApiInterfaceimport com.etrack.myapplication.commonUtils.CommonUtilsimport com.etrack.myapplication.commonUtils.ProgressUtilsimport com.etrack.myapplication.controller.ApiClientimport com.etrack.myapplication.controller.MainActivityimport com.etrack.myapplication.model.inputService.AddBranchimport com.etrack.myapplication.model.inputService.DeleteBranchimport com.etrack.myapplication.model.inputService.GetBranchsimport com.etrack.myapplication.model.inputService.KeyValueimport com.etrack.myapplication.model.outputService.GetBranchsSuccessFailureimport com.etrack.myapplication.model.outputService.SuccessFailureimport kotlinx.android.synthetic.main.fragment_delete_branch.view.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Response/** * A simple [Fragment] subclass. */class DeleteBranchFragment : Fragment() {    lateinit var sp_branch: Spinner    lateinit var et_branchname: EditText    lateinit var et_branchnameAr: EditText    lateinit var et_branchAddress: EditText    lateinit var btn_deletebranch: Button    lateinit var btn_updatebranch: Button    lateinit var mContext: Context    lateinit var mHom: MainActivity    lateinit var branchId: String    private lateinit var branches: ArrayList<GetBranchsSuccessFailure.GetBranchDataObject>    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mContext = activity        mHom = activity as MainActivity    }    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val root = inflater!!.inflate(R.layout.fragment_delete_branch, container, false)        sp_branch = root!!.spBranch        btn_deletebranch = root!!.btn_deletebranch        btn_updatebranch = root!!.btn_updatebranch        et_branchname = root!!.et_branchname        et_branchnameAr = root!!.et_branchnameAr        et_branchAddress = root!!.et_branchAddress        sp_branch!!.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {                branchId = (parent.selectedItem as KeyValue).key                branches!!.forEach {                    if (it.branchId.toString().equals(branchId)) {                        et_branchname.setText(it.branchNameEn)                        et_branchnameAr.setText(it.branchNameAr)                        et_branchAddress.setText(it.branchAddress)                        //     discount!!.setText(it.discount.toString())                    }                }                //    Toast.makeText(context, "Country ID: " + country.getId() + ",  Country Name : " + country.getName(), Toast.LENGTH_SHORT).show()            }            override fun onNothingSelected(parent: AdapterView<*>) {}        }        btn_updatebranch.setOnClickListener {            var updateBranch = AddBranch()            var branchObject = updateBranch.AddBranchObject()            branchObject.branchId = (sp_branch.selectedItem as KeyValue).key            branchObject.branchNameAr = et_branchnameAr.text.trim().toString()            branchObject.branchNameEn = et_branchname.text.trim().toString()            branchObject.branchAddress = et_branchAddress.text.trim().toString()            branchObject.companyId = CommonUtils.getCompanyId(mContext)            updateBranch.objbranch = branchObject            updateService(updateBranch)        }        btn_deletebranch.setOnClickListener {            var deleteBranch = DeleteBranch()            var deleteObject = deleteBranch.Objitem()            deleteObject.branchId = (sp_branch.selectedItem as KeyValue).key            deleteBranch.setobjBranch(deleteObject)            deleteService(deleteBranch)        }        getBranchList();        return root;    }    private fun getBranchList() {        var getBranchs = GetBranchs()        var getBranch = getBranchs.Objbranch()        getBranch.branchId = ""        getBranch.companyId = CommonUtils.getCompanyId(mContext)        getBranchs.objbranch = getBranch        getAppBranchList(getBranchs)    }    fun deleteService(deleteBranch: DeleteBranch) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.delete_branches), getString(R                    .string.please_wait), false)            val deleteBranchApi = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val deleteBranchesCall = deleteBranchApi!!.deleteBranch(deleteBranch)            deleteBranchesCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            ProgressUtils.stopProgress()                            getBranchList()                        }  else {                            Toast.makeText(mContext, "failed to delete " + response.body()!!.message.toString(), Toast.LENGTH_LONG).show()                            ProgressUtils.stopProgress()                        }                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to delete branch ")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Delete Branch Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Delete Branch catch Failure" + e.toString())        }    }    fun updateService(updateBranch: AddBranch) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.update_branches), getString(R                    .string.please_wait), false)            val updateBranchApi = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val deleteBranchesCall = updateBranchApi!!.createBranch(updateBranch)            deleteBranchesCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            ProgressUtils.stopProgress()                            getBranchList()                        } else {                            Toast.makeText(mContext, "failed to delete ", Toast.LENGTH_LONG).show()                            ProgressUtils.stopProgress()                        }                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to delete branch ")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Delete Branch Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Delete Branch catch Failure" + e.toString())        }    }    fun getAppBranchList(getBranchs: GetBranchs) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.getting_branches), getString(R.string.please_wait), false)            val getAllBranchs = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val branchesCall = getAllBranchs!!.getAllBranch(getBranchs)            branchesCall.enqueue(object : Callback<GetBranchsSuccessFailure> {                override fun onResponse(call: Call<GetBranchsSuccessFailure>, response: Response<GetBranchsSuccessFailure>) {                    if (response.body() != null) {                        val branchList = ArrayList<KeyValue>()                        if (response.body()!!.message.equals("true")) {                            branches = response.body()!!.dataObject as ArrayList<GetBranchsSuccessFailure.GetBranchDataObject>                            if (branches.size != 0) {                                branches.forEach {                                    branchList.add(KeyValue(it.branchId.toString(), it.branchNameEn))                                }                                val adapter = ArrayAdapter<KeyValue>(context, android.R.layout.simple_spinner_dropdown_item, branchList)                                sp_branch.setAdapter(adapter)                                //             Toast.makeText(mContext, "Company created succefully", Toast.LENGTH_SHORT).show()                            } else {                                mHom!!.showCreateBranch()                            }                        } else                            Toast.makeText(mContext, "failed to retrive ", Toast.LENGTH_LONG).show()                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to retrive branch ")                    }                }                override fun onFailure(call: Call<GetBranchsSuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Getting All Branch Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Company Register service Failure" + e.toString())        }    }    override fun onResume() {        mHom!!.setTitle(getString(R.string.update_delete_branch))        super.onResume()    }}// Required empty public constructor