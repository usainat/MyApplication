package com.etrack.myapplication.fragmentimport android.content.ContentValuesimport android.content.Contextimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.etrack.myapplication.Rimport com.etrack.myapplication.`interface`.ApiInterfaceimport com.etrack.myapplication.commonUtils.CommonUtilsimport com.etrack.myapplication.commonUtils.ProgressUtilsimport com.etrack.myapplication.commonUtils.SharedPreferenceHelperimport com.etrack.myapplication.controller.ApiClientimport com.etrack.myapplication.controller.MainActivityimport com.etrack.myapplication.model.inputService.*import com.etrack.myapplication.model.outputService.GetCatogoreySuccessFailureimport com.etrack.myapplication.model.outputService.SuccessFailureimport kotlinx.android.synthetic.main.fragment_delete_catog.view.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Response/** * A simple [Fragment] subclass. */class DeleteCatogFragment : Fragment() {    lateinit var sp_branch: Spinner    lateinit var etDiscoutPercentage: EditText    lateinit var etGroupName: EditText    lateinit var btn_deleteGroup: Button    lateinit var btn_updateGroup: Button    lateinit var mContext: Context    lateinit var mHom: MainActivity    lateinit var branchId: String    private var catList: List<GetCatogoreySuccessFailure.GetCatogoreyDataObject>? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mContext = activity        mHom = activity as MainActivity    }    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val root = inflater!!.inflate(R.layout.fragment_delete_catog, container, false)        sp_branch = root!!.spGroup        btn_deleteGroup = root!!.btn_deleteGroup        etGroupName = root!!.etGroupName        etDiscoutPercentage = root!!.etDiscoutPercentage        btn_updateGroup = root!!.btn_UpdateGroup        sp_branch!!.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {                branchId = (parent.selectedItem as KeyValue).key                catList!!.forEach {                    if (it.categoryCode.toString().equals(branchId)) {                        etDiscoutPercentage.setText(it.discount)                        etGroupName.setText(it.categoryNameEn)                        //     discount!!.setText(it.discount.toString())                    }                }                //    Toast.makeText(context, "Country ID: " + country.getId() + ",  Country Name : " + country.getName(), Toast.LENGTH_SHORT).show()            }            override fun onNothingSelected(parent: AdapterView<*>) {}        }        btn_deleteGroup.setOnClickListener {            var deleteCatog = DeleteCatog()            var deleteObject = deleteCatog.Objitem()            deleteObject.catogoreyCode = (sp_branch.selectedItem as KeyValue).key            deleteCatog.objitem = deleteObject            deleteService(deleteCatog)        }        btn_updateGroup.setOnClickListener {            if(etGroupName.text.toString().trim().length > 0  && etGroupName.text.toString().trim().length > 0){            var categoryNameAr: String =""            branchId = (sp_branch.selectedItem as KeyValue).key            catList!!.forEach {                if (it.categoryCode.toString().equals(branchId)) {                    categoryNameAr = it.categoryNameAr                    //     discount!!.setText(it.discount.toString())                }            }            var company = SharedPreferenceHelper.getSharedPreferenceString(mContext, SharedPreferenceHelper.PREF_APP_COMPANY, "0")            var branch = SharedPreferenceHelper.getSharedPreferenceString(mContext, SharedPreferenceHelper.PREF_APP_BRANCH, "empty")            val addCatogoreyObject = AddCatogoreyObjcat()            addCatogoreyObject.categoryName = etGroupName.text.toString().trim()            addCatogoreyObject.categoryNameAr = categoryNameAr            addCatogoreyObject.companyId = company            addCatogoreyObject.categoryCode = branchId            addCatogoreyObject.discount = etDiscoutPercentage.text.toString().trim()            val addCatogorey = AddCatogorey()            addCatogorey.objcat = addCatogoreyObject            saveCatagory(addCatogorey) }            else                Toast.makeText(mContext, getString(R.string.please_enter_all_field), Toast.LENGTH_LONG).show()        }        getCatogList();        return root;    }    private fun getCatogList() {        val catogorey = GetCatogorey()        val catogoreyObj = catogorey.CatogoreyObjcat();        catogoreyObj.categoryCode = ""        catogoreyObj.companyId = CommonUtils.getCompanyId(mContext)        catogorey.objcat = catogoreyObj        getGroupDetails(catogorey);    }    fun deleteService(deleteBranch: DeleteCatog) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.delete_catogory), getString(R.string.please_wait), false)            val deleteCatogApi = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val deleteCatogCall = deleteCatogApi!!.deleteCatog(deleteBranch)            deleteCatogCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            ProgressUtils.stopProgress()                            getCatogList()                        } else {                            Toast.makeText(mContext, "failed to delete " +response.body()!!.message.toString(), Toast.LENGTH_LONG).show()                            ProgressUtils.stopProgress()                        }                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to delete branch ")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Delete Branch Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Delete Branch catch Failure" + e.toString())        }    }    private fun getGroupDetails(catogorey: GetCatogorey) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.getting_catogorey), getString(R.string.please_wait), false)            //            val gson = Gson()            //       val personString = gson.toJson(register).toString()            val getAllCatogoreyList = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val getCatogoreyListCall = getAllCatogoreyList!!.getAllCatogoreyList(catogorey)            getCatogoreyListCall.enqueue(object : Callback<GetCatogoreySuccessFailure> {                override fun onResponse(call: Call<GetCatogoreySuccessFailure>, response: Response<GetCatogoreySuccessFailure>) {                    if (response.body() != null) {                        catList = response.body()!!.dataObject                        if (catList!!.size != 0) {                            var KeyValue = ArrayList<KeyValue>()                            catList!!.forEach {                                AddItemFragment.data = com.etrack.myapplication.model.inputService.KeyValue(it.categoryCode, it.categoryNameEn)                                KeyValue.add(AddItemFragment.data!!)                            }                            val adapter = ArrayAdapter(mContext, android.R.layout.simple_spinner_item, KeyValue)                            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)                            sp_branch!!.adapter = adapter                            ProgressUtils.stopProgress()                        } else {                            mHom.showAddCatogory()                        }                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                        // retryAgain();                        Log.e(ContentValues.TAG, "Citizen Register Failure")                    }                }                override fun onFailure(call: Call<GetCatogoreySuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Citizen Register Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Citizen Register service Failure" + e.toString())        }    }    private fun saveCatagory(addCatogorey: AddCatogorey) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.updating_catogorey),                    getString(R.string.please_wait), false)            val registerCitizen = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val registerCall = registerCitizen!!.createCatagorey(addCatogorey)            registerCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            ProgressUtils.stopProgress()                            getCatogList()                            Toast.makeText(mContext, "Add succefully", Toast.LENGTH_SHORT).show()                        }  else                            Toast.makeText(mContext, "Not add", Toast.LENGTH_SHORT).show()                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                        // retryAgain();                        Log.e(ContentValues.TAG, "Save Catogorey Failure")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Save Csatogorey Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Savec Catogr catch exception" + e.toString())        }    }    override fun onResume() {        mHom!!.setTitle(getString(R.string.update_delete_catogorey))        super.onResume()    }}// Required empty public constructor