package com.etrack.myapplication.fragmentimport android.content.ContentValuesimport android.content.Contextimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.etrack.myapplication.Rimport com.etrack.myapplication.`interface`.ApiInterfaceimport com.etrack.myapplication.commonUtils.CommonUtilsimport com.etrack.myapplication.commonUtils.ProgressUtilsimport com.etrack.myapplication.controller.ApiClientimport com.etrack.myapplication.controller.MainActivityimport com.etrack.myapplication.model.inputService.CreateNewUserimport com.etrack.myapplication.model.inputService.GetBranchsimport com.etrack.myapplication.model.inputService.KeyValueimport com.etrack.myapplication.model.outputService.GetBranchsSuccessFailureimport com.etrack.myapplication.model.outputService.SuccessFailureimport kotlinx.android.synthetic.main.fragment_user_register.view.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass CreateNewUserFragment : Fragment() {    private var mHom: MainActivity? = null;    private lateinit var etFirstName: EditText    private lateinit var etLastName: EditText    private lateinit var etEmail: EditText    private lateinit var etCt: EditText    private lateinit var etUserName: EditText    private lateinit var et_password: EditText    private lateinit var et_confirm_password: EditText    private lateinit var spBranchList: Spinner    private lateinit var spRoleList: Spinner    private lateinit var btn_register_user: Button    private lateinit var mContext: Context    private lateinit var password: String    lateinit var confirm_password: String    private lateinit var branches: ArrayList<GetBranchsSuccessFailure.GetBranchDataObject>    private var branch: String = ""    private var role: String = ""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mContext = activity        mHom = activity as MainActivity?    }    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        val view = inflater!!.inflate(R.layout.fragment_user_register, container, false)        etFirstName = view.etFirstName        etLastName = view.etLastName        etLastName = view.etLastName        spBranchList = view.spBranchList        etEmail = view.etEmail        etCt = view.etCt        etUserName = view.etUserName        et_password = view.et_password        et_confirm_password = view.et_confirm_password        btn_register_user = view.btn_register        spRoleList = view.spRoleList        setUserRoleData()        var getBranchs = GetBranchs()        var getBranch = getBranchs.Objbranch()        getBranch.branchId = ""        getBranch.companyId = CommonUtils.getCompanyId(mContext)        getBranchs.objbranch = getBranch        getAllBranch(getBranchs)        spBranchList.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {                branch = (parent.selectedItem as KeyValue).key                //    Toast.makeText(context, "Country ID: " + country.getId() + ",  Country Name : " + country.getName(), Toast.LENGTH_SHORT).show()            }            override fun onNothingSelected(parent: AdapterView<*>) {}        }        spRoleList.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {                role = (parent.selectedItem as KeyValue).key                //    Toast.makeText(context, "Country ID: " + country.getId() + ",  Country Name : " + country.getName(), Toast.LENGTH_SHORT).show()            }            override fun onNothingSelected(parent: AdapterView<*>) {}        }        btn_register_user.setOnClickListener(View.OnClickListener {            var firstName = etFirstName.text.trim().toString()            var lastName = etLastName.text.trim().toString()            var email = etEmail.text.trim().toString()            var ct = etCt.text.toString()            var userName = etUserName.text.trim().toString()            password = et_password.text.trim().toString()            confirm_password = et_confirm_password.text.trim().toString()            if (firstName.length > 0 && lastName.length > 0 &&                    isValidEmail(email) && ct.length > 0 && userName.length > 0 &&                    passwordIsValid()) {                val createNewUser = CreateNewUser()                val objUser = createNewUser.Objuser()                objUser.branchId = branch                objUser.companyId = CommonUtils.getCompanyId(mContext)                objUser.userId = ""                objUser.email = email                objUser.firstName = firstName                objUser.lastName = lastName                objUser.mobile = ct                objUser.password = password                objUser.userName = userName                objUser.userRole = role                createNewUser.objuser = objUser                createUserInBranch(createNewUser)            } else if (!isValidEmail(email))                Toast.makeText(context, getString(R.string.email_not_vlid), Toast.LENGTH_SHORT).show()            else if (!passwordIsValid())                Toast.makeText(context, getString(R.string.password_not_valid), Toast.LENGTH_SHORT).show()            else                Toast.makeText(context, getString(R.string.please_enter_all_field), Toast.LENGTH_SHORT).show()        })        return view    }    private fun setUserRoleData() {        val roleList = ArrayList<KeyValue>()        roleList.add(KeyValue("2", "Admin"))        roleList.add(KeyValue("3", "User"))        //fill data in spinner        val adapter = ArrayAdapter<KeyValue>(context, android.R.layout.simple_spinner_dropdown_item, roleList)        spRoleList.setAdapter(adapter)        //  spUserList.setSelection(adapter.getPosition(myItem))//Optional to set the selected item.    }    private fun getAllBranch(getBranchs: GetBranchs) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.getting_branches), getString(R.string.please_wait), false)            val getAllBranchs = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val branchesCall = getAllBranchs!!.getAllBranch(getBranchs)            branchesCall.enqueue(object : Callback<GetBranchsSuccessFailure> {                override fun onResponse(call: Call<GetBranchsSuccessFailure>, response: Response<GetBranchsSuccessFailure>) {                    if (response.body() != null) {                        val branchList = ArrayList<KeyValue>()                        if (response.body()!!.message.equals("true")) {                            branches = response.body()!!.dataObject as ArrayList<GetBranchsSuccessFailure.GetBranchDataObject>                            if (branches.size != 0) {                                branches.forEach {                                    branchList.add(KeyValue(it.branchId.toString(), it.branchNameEn))                                }                                val adapter = ArrayAdapter<KeyValue>(context, android.R.layout.simple_spinner_dropdown_item, branchList)                                spBranchList.setAdapter(adapter)                                //             Toast.makeText(mContext, "Company created succefully", Toast.LENGTH_SHORT).show()                            } else {                                mHom!!.showCreateBranch()                            }                        } else                            Toast.makeText(mContext, "failed to retrive ", Toast.LENGTH_LONG).show()                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to retrive branch ")                    }                }                override fun onFailure(call: Call<GetBranchsSuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Company Register Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Company Register service Failure" + e.toString())        }    }    fun createUserInBranch(createNewUser: CreateNewUser) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.save_user), getString(R.string.please_wait), false)            val getAllBranchs = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val branchesCall = getAllBranchs!!.createNewUser(createNewUser)            branchesCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            Toast.makeText(mContext, "Created new User succefully", Toast.LENGTH_SHORT).show()                            clearAll();                        } else                            Toast.makeText(mContext, "failed to create user ", Toast.LENGTH_LONG).show()                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to create user ")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Company Register Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Company Register service Failure" + e.toString())        }    }    private fun clearAll() {        etFirstName.setText("")        etLastName.setText("")        etEmail.setText("")        etCt.setText("")        etUserName.setText("")        et_password.setText("")        et_confirm_password.setText("")    }    fun isValidEmail(target: CharSequence?): Boolean {        return if (target == null) {            false        } else {            android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches()        }    }    fun passwordIsValid(): Boolean {        if (password.length >= 4 && confirm_password.length >= 4) {            if (password.equals(confirm_password))                return true        } else {            Toast.makeText(context, getString(R.string.password_too_short), Toast.LENGTH_SHORT).show()            return false        }        return false    }    override fun onResume() {        mHom!!.setTitle(getString(R.string.create_user))        super.onResume()    }}