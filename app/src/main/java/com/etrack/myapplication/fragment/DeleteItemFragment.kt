package com.etrack.myapplication.fragmentimport android.content.ContentValuesimport android.content.Contextimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import com.etrack.myapplication.Rimport com.etrack.myapplication.`interface`.ApiInterfaceimport com.etrack.myapplication.commonUtils.CommonUtilsimport com.etrack.myapplication.commonUtils.ProgressUtilsimport com.etrack.myapplication.controller.ApiClientimport com.etrack.myapplication.controller.MainActivityimport com.etrack.myapplication.model.inputService.AddCatogoreyimport com.etrack.myapplication.model.inputService.DeleteItemimport com.etrack.myapplication.model.inputService.GetItemimport com.etrack.myapplication.model.inputService.KeyValueimport com.etrack.myapplication.model.outputService.GetItemListSuccessFailureimport com.etrack.myapplication.model.outputService.SuccessFailureimport kotlinx.android.synthetic.main.fragment_delete_item.view.*import retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.util.*/** * A simple [Fragment] subclass. */class DeleteItemFragment : Fragment() {    lateinit var spItemList: Spinner    lateinit var btn_serch_item: Button    lateinit var btn_deleteItem: Button    lateinit var barCode: EditText    lateinit var itemName: EditText    lateinit var itemArabName: EditText    lateinit var openningQty: EditText    lateinit var costPrice: EditText    lateinit var salePrice: EditText    lateinit var netPrice: EditText    lateinit var catogorey: EditText    lateinit var mContext: Context    lateinit var mHom: MainActivity    lateinit var itemCode: String    private var itemList: List<GetItemListSuccessFailure.GetItemListDataObject>? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        mContext = activity        mHom = activity as MainActivity    }    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val root = inflater!!.inflate(R.layout.fragment_delete_item, container, false)        barCode = root!!.et_itembarcode        itemName = root!!.et_itemname        itemArabName = root!!.et_itemname_arabic        openningQty = root!!.et_openning_qty        costPrice = root!!.et_cost_price        salePrice = root!!.et_sale_price        netPrice = root!!.et_net_price        catogorey = root!!.et_item_catogorey        btn_serch_item = root!!.btn_serch_item        btn_deleteItem = root!!.btn_deleteItem        spItemList = root!!.spItemList        spItemList!!.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {                itemCode = (parent.selectedItem as KeyValue).key                itemList!!.forEach {                 if(it.itemCode.toString().equals(itemCode)){                     itemName.setText(it.itemNameEn)                     itemArabName.setText(it.itemNameAr)                     catogorey.setText(it.categoryNameEn)                     openningQty.setText(it.openingQuantity)                     costPrice.setText(it.costPrice)                     salePrice.setText(it.salesPrice)                     netPrice.setText(it.unitPrice)                    // v.setText(it.itemNameAr)                 }                }                //    Toast.makeText(context, "Country ID: " + country.getId() + ",  Country Name : " + country.getName(), Toast.LENGTH_SHORT).show()            }            override fun onNothingSelected(parent: AdapterView<*>) {}        }        btn_deleteItem.setOnClickListener {            var deleteItem = DeleteItem()            var deleteObject = deleteItem.Objitem()            deleteObject.companyId = CommonUtils.getCompanyId(mContext)            deleteObject.itemCode = (spItemList.selectedItem as KeyValue).key            deleteItem.objitem = deleteObject            deleteService(deleteItem)        }        getAllItems();        return root;    }    private fun getAllItems() {        var getItem = GetItem()        var objectItem = getItem.Objitem()        objectItem.companyId = CommonUtils.getCompanyId(mContext)        objectItem.itemCode = ""        getItem.objitem = objectItem        GetProduct(getItem)    }    fun deleteService(deleteItem: DeleteItem) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.delete_branches), getString(R.string.please_wait), false)            val deleteBranchApi = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val deleteBranchesCall = deleteBranchApi!!.deleteItem(deleteItem)            deleteBranchesCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            ProgressUtils.stopProgress()                            getAllItems()                        } else {                            Toast.makeText(mContext, "failed to delete ", Toast.LENGTH_LONG).show()                            ProgressUtils.stopProgress()                        }                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_LONG)                        // retryAgain();                        Log.e(ContentValues.TAG, "failed to delete branch ")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Delete Branch Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Delete Branch catch Failure" + e.toString())        }    }    private fun GetProduct(item: GetItem) {        try {            ProgressUtils.startProgress(mContext, getString(R.string.getting_product_list), getString(R.string.please_wait), false)            val productsApi = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val productsCall = productsApi!!.getAllProductsList(item)            productsCall.enqueue(object : Callback<GetItemListSuccessFailure> {                override fun onResponse(call: Call<GetItemListSuccessFailure>, response: Response<GetItemListSuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true")) {                            itemList = response.body()!!.dataObject as ArrayList<GetItemListSuccessFailure.GetItemListDataObject>                            if (itemList!!.size != 0) {                                var KeyValue = ArrayList<KeyValue>()                                itemList!!.forEach {                                    AddItemFragment.data = com.etrack.myapplication.model.inputService.KeyValue(it.itemCode, it.itemNameEn)                                    KeyValue.add(AddItemFragment.data!!)                                }                                val adapter = ArrayAdapter(mContext, android.R.layout.simple_spinner_item, KeyValue)                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)                                spItemList!!.adapter = adapter                            }                            ProgressUtils.stopProgress()                        } else {                            ProgressUtils.stopProgress()                            CommonUtils.makeText(mContext, "failed to delete " +response.body()!!.message.toString(), Toast.LENGTH_SHORT)                            // retryAgain();                            Log.e(ContentValues.TAG, "Login Failure")                        }                    }                }                override fun onFailure(call: Call<GetItemListSuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Add Branch Failure" + t.toString())                }            })        } catch (ex: Exception) {            ProgressUtils.stopProgress()            Log.e(ContentValues.TAG, "Add Branch Failure" + ex.toString())        }    }    private fun saveCatagory(addCatogorey: AddCatogorey) {        try {            val registerCitizen = ApiClient().BaseUrl()?.create(ApiInterface::class.java)            val registerCall = registerCitizen!!.createCatagorey(addCatogorey)            registerCall.enqueue(object : Callback<SuccessFailure> {                override fun onResponse(call: Call<SuccessFailure>, response: Response<SuccessFailure>) {                    if (response.body() != null) {                        if (response.body()!!.message.equals("true"))                            Toast.makeText(mContext, "Add succefully", Toast.LENGTH_SHORT).show()                        else                            Toast.makeText(mContext, "Not add", Toast.LENGTH_SHORT).show()                        ProgressUtils.stopProgress()                    } else {                        ProgressUtils.stopProgress()                        CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                        // retryAgain();                        Log.e(ContentValues.TAG, "Save Catogorey Failure")                    }                }                override fun onFailure(call: Call<SuccessFailure>, t: Throwable) {                    ProgressUtils.stopProgress()                    //  retryAgain();                    CommonUtils.makeText(mContext, getString(R.string.sonthing_went_wrong), Toast.LENGTH_SHORT)                    Log.e(ContentValues.TAG, "Save Csatogorey Failure" + t.toString())                }            })        } catch (e: Exception) {            ProgressUtils.stopProgress()            e.printStackTrace()            Log.e(ContentValues.TAG, "Savec Catogr catch exception" + e.toString())        }    }    override fun onResume() {        mHom!!.setTitle(getString(R.string.delete_item))        super.onResume()    }}// Required empty public constructor